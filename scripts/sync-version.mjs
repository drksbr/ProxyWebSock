#!/usr/bin/env node

import { execSync } from 'node:child_process';
import { existsSync, readFileSync, writeFileSync } from 'node:fs';
import { fileURLToPath } from 'node:url';
import path from 'node:path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.normalize(path.join(__dirname, '..'));

const versionBasePath = path.join(rootDir, 'VERSION');
let baseVersion = '0.0.0';
if (existsSync(versionBasePath)) {
  baseVersion = readFileSync(versionBasePath, 'utf8').trim() || baseVersion;
}

function git(command) {
  try {
    return execSync(command, { cwd: rootDir, stdio: ['ignore', 'pipe', 'ignore'] })
      .toString()
      .trim();
  } catch (err) {
    return '';
  }
}

const commitCount = git('git rev-list --count HEAD') || '0';
const shortHash = git('git rev-parse --short HEAD') || 'unknown';
const detectDirty = process.env.VERSION_DETECT_DIRTY === '1';
const dirtyStatus = detectDirty ? git('git status --porcelain') : '';
const dirtySuffix = dirtyStatus ? '.dirty' : '';
const version = `${baseVersion}+build.${commitCount}.${shortHash}${dirtySuffix}`;

const goTarget = path.join(rootDir, 'internal', 'version', 'version.go');
const goSource = `package version

// Code generated by scripts/sync-version.mjs; DO NOT EDIT.

const Version = "${version}"
`;
writeFileSync(goTarget, goSource);

const frontendTarget = path.join(rootDir, 'web', 'src', 'version.ts');
const frontendSource = `// Code generated by scripts/sync-version.mjs; DO NOT EDIT.\nexport const FRONTEND_VERSION = "${version}";\n`;
writeFileSync(frontendTarget, frontendSource);

console.log(`Version synchronized: ${version}`);
